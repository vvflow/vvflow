#!/usr/bin/env python3

from __future__ import print_function
import sys, os
from subprocess import Popen, PIPE
import argparse
import time


parser = argparse.ArgumentParser(description='Quickly plot some data from pipe',
    formatter_class=argparse.RawDescriptionHelpFormatter);

parser.add_argument(
    '-o', '--output',
    dest='output',
    help='set filename of plotted image'
)

parser.add_argument(
    '-l', '--lines',
    dest='plot_w_lines',
    action='store_true',
    help='plot with lines'
)

parser.add_argument(
    '-p', '--points',
    dest='plot_w_points',
    action='store_true',
    help='plot with points'
)

parser.add_argument(
    '-u', '--using',
    dest='plot_using',
    type=str,
    default='1:2',
    help='plot using specified columns'
)

parser.add_argument(
    '--square',
    dest='plot_square',
    action='store_true',
    help='set size ratio square'
)

parser.add_argument(
    '-x',
    dest='xrange',
    nargs=2,
    type=float,
    metavar=('XMIN', 'XMAX'),
    default=(None, None),
    help='set xrange'
)

parser.add_argument(
    '-y',
    dest='yrange',
    nargs=2,
    type=float,
    metavar=('YMIN', 'YMAX'),
    default=(None, None),
    help='set yrange'
)

parser.add_argument(
    '--grid',
    dest='grid',
    choices=['x', 'y', 'xy'],
    type=str,
    default='',
    help='plot major grid'
)

parser.add_argument(
    '--size',
    dest='size',
    nargs=2,
    type=int,
    metavar=('WIDTH', 'HEIGHT'),
    default=(640, 480),
    help='set plot size'
)

parser.add_argument(
    '--dump-script',
    dest='dump_script',
    action='store_true',
    help='print gnuplot script to stdout'
)

args = parser.parse_args()
script_lines = []
def gpw(str, *args, **kwargs):
    script_lines.append(str.format(*args, **kwargs))

gpw("""set terminal pngcairo enhanced""")
gpw(""" size {}, {};\n""", args.size[0], args.size[1])
if args.output is not None:
    gpw("""set output '{}';\n""", args.output)

gpw("""unset key;\n""")
if args.plot_square:
    gpw("""set size ratio -1;\n""")
if args.xrange[0] is not None and args.xrange[1] is not None:
    gpw("""set xrange [{}:{}];\n""", args.xrange[0], args.xrange[1])
if args.yrange[0] is not None and args.yrange[1] is not None:
    gpw("""set yrange [{}:{}];\n""", args.yrange[0], args.yrange[1])
if 'x' in args.grid:
    gpw("""set grid ytics;\n""")
if 'y' in args.grid:
    gpw("""set grid xtics;\n""")

style_lt = "0"
if args.plot_w_lines:
    style_lt = "1"
elif not args.plot_w_points:
    style_lt = "1"

style_pt = "0"
if args.plot_w_points:
    style_pt = "7"

gpw("plot '-'")
gpw(" using {}", args.plot_using)
gpw(" with linespoints lt {} pt {}", style_lt, style_pt)
gpw(" lc rgb 'black';\n")
gpw("exit;\n")

script = "".join(script_lines)
if args.dump_script or args.output is None:
    print(script)

if args.output is not None:
    gp = Popen(["gnuplot", "-e", script])
    exit(gp.wait())
